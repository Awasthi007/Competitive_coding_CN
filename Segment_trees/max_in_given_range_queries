Maximum Query

You are given an array of integet of size N and Q queries in form of (l, r). You are supposed to find the maximum value of array between index l and r (both inclusive)
Input Format:
First line of input contain an integer N (number of elements in the array)
Second line contain N space-separated integers denoting the elements of the array
Third line contain an integer Q (number of queries to be processed)
Next Q line contain two space-separated integers denoting l and r.
Output Format:
For each test case print the output in newline.
Constraints:
1 <= N <= 10^4
1 <= Q <= 10^6
1 <= arr[i] <= 10^9
0 <= l <= r < N
Sample Input:
5
1 2 3 5 4
2 
0 1
3 4
Sample Output:
2
5

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;

ll max(ll a, ll b)
{
    if(a > b)
        return a;
    return b;
}

void buildTree(ll* arr, ll* tree, ll start, ll end, ll treeNode)
{
    if(start == end)
    {
        tree[treeNode] = arr[start];
        return;
    }
    
    ll mid = (start + end)/2;
    buildTree(arr, tree, start, mid, 2*treeNode);
    buildTree(arr, tree, mid+1, end, 2*treeNode+1);
    
    tree[treeNode] = max(tree[2*treeNode], tree[2*treeNode+1]);
    return;
}

ll query(ll* tree, ll start, ll end, ll left, ll right, ll treeNode)
{
    // completly outside
    
    if(left > end || start > right)
    {
        return -10000;
    }
    
    // inside
    if(start >= left && end <= right)
    {
        return tree[treeNode];
    }
    // partial
    
    ll mid = (start + end)/2;
    ll ans1 = query( tree, start, mid, left, right, 2*treeNode);
    ll ans2 = query( tree, mid+1, end, left, right, 2*treeNode+1);
    
    ll ans = max(ans1, ans2);
    return ans;
    
    
}

int main()
{
    
    // write your code here
    int n;
    cin>>n;
    
    ll arr[n];
    for(int i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    ll* tree = new ll[4*n];
    buildTree(arr, tree, 0, n-1, 1);
    
    
    ll q;
    cin>>q;
    
    
    
   
    while(q--)
    {
        ll l,r;
        cin>>l>>r;
        
        cout<<query(tree, 0, n-1, l, r, 1)<<endl;
    }
    
    return 0;
}
