Minimum In SubArray
Send Feedback
You are given a sequence A[1], A[2], ..., A[N] of N numbers ( 0 ≤ A[i] ≤ 10^8 , 2 ≤ N ≤ 10^5 ). There are Q queries, and each query is defined in either of the following two ways:
Query on range:
You are given two numbers i and j; the answer to each query is the minimum number between the range (i, j) (including both i and j). Note that in this query, i and j lies in the range: [1, N].
Update query:
You are given two numbers i and B; update A[i] to B. Note that in this query, i lies in the range: [1, N].
Input Format:
The first line of input contains two integers: N and Q, representing the length of the sequence and the number of queries. 
The second line of input contains N space-separated integers, A[i].  
Next, Q lines contain the queries. Each line contains one character, followed by two space-separated integers. For the query on range, the character will be q and for the update query, the character will be u. 
Constraints:
1 ≤ i ≤ N
0 ≤ B ≤ 10^8
1 ≤ i <= j ≤ N
Output Format:
For each query on range, print the minimum number between the range, in a new line.
Sample Input 1:
4 3
5 2 4 3
q 1 3
u 1 1
q 3 4
Sample Output 1:
2
3



|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;


ll min(ll a, ll b)
{
    if(a < b)
        return a;
    return b;
}


void buildTree(ll* arr, ll* tree, ll start, ll end, ll treeNode)
{
    if(start == end)
    {
        tree[treeNode] = arr[start];
        return;
    }
    
    ll mid = (start+end)/2;
    
    buildTree(arr, tree, start, mid, 2*treeNode);
    buildTree(arr, tree, mid+1, end, 2*treeNode+1);
    
    tree[treeNode] = min(tree[2*treeNode],tree[2*treeNode+1]);
}

void updateTree(ll* arr, ll* tree, ll start, ll end, ll treeNode, ll index, ll value)
{
    if(start == end)
    {
        arr[index] = value;
        tree[treeNode] = value;
        return;
    }
    
    ll mid = (start+end)/2;
    if(index > mid)
    {
        updateTree(arr, tree, mid+1, end, 2*treeNode+1, index, value);
    }
    else
    {
        updateTree(arr, tree, start, mid, 2*treeNode, index, value);
    }
    tree[treeNode] = min(tree[2*treeNode], tree[2*treeNode+1]);
    
}

ll query(ll* tree, ll start, ll end, ll treeNode, ll left, ll right)
{
    // completely outside
    if(end < left || start > right)
    {
        return INT_MAX;
    }
    
    // completely indside
    
    if(start >= left && end <= right)
    {
        return tree[treeNode];
    }
    
    // partial
    ll mid = (start + end)/2;
    ll ans1 = query(tree, start, mid, 2*treeNode, left, right);
    ll ans2 = query(tree, mid+1, end, 2*treeNode+1, left, right);
    
    ll ans = min(ans1, ans2);
    return ans;
}
int main()
{
    ll n,q;
    cin>>n>>q;
    
    ll arr[n];
    for(ll i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    
    ll* tree = new ll[4*n]();
    buildTree(arr, tree, 0, n-1, 1); // it will store the minimum no. in the ramge
    
    while(q--)
    {
        char c;
        cin>>c;
        
        if(c == 'u')
        {
            ll i,b;
            cin>>i>>b;
            
            updateTree(arr, tree, 0, n-1, 1, i-1, b);
        }
        else
        {
            
            ll l, r;
			cin>>l>>r;
			cout<<query(tree, 0, n-1, 1, l-1, r-1)<<endl;
        }
    }
    
    return 0;
}
