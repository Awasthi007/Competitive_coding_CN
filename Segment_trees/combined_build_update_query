void buildTree(int* arr, int* tree, int start, int end, int treeNode)
{
	if(start == end)
	{
		tree[treeNode] = arr[start];
		return;
	}
	int mid = (start + end)/2;

	buildTree(arr, tree, start, mid, 2*treeNode);
	buildTree(arr, tree, mid+1, end, 2*treeNode+1);

	tree[treeNode] = tree[2*treeNode] + tree[2*treeNode+1];
}

void updateTree(ll* arr, ll* tree, ll start, ll end, ll index, ll value)
{
	if(start == end)
	{
		arr[index] = value;
		tree[treeNode] = value;
		return;
	}

	int mid = (start+end)/2;
	if(index > mid)
	{
		updateTree(arr, tree, mid+1, end, index, value);
	}
	else
	{
		updateTree(arr, tree, start, mid, index, value);
	}

	tree[treeNode] = tree[2*treeNode] + tree[2*treeNode+1];

}

int query(int* tree, int start, int end, int treeNode, int left, int right)
{
	// completely outside
	if(start > right || end < left)
	{
		return 0;
	}

	// completely inside

	if(start >= left && end <=right)
	{
		return tree[treeNode];
	}
	// partially inside and partially inside

	int mid = (start + end)/2;
	int ans1 = query(tree, start, mid, 2*treeNode, left, right);
	int ans2 = query(tree, mid+1, end, 2*treeNode+1, left, right);

	return ans1+ans2;
}
